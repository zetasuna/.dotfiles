#!/usr/bin/fish

sudo apt -y install \
    libxft-dev libx11-dev libxrandr-dev libxinerama-dev libimlib2-dev \
    libevent-dev ncurses-dev libpango-1.0-0 libxtst-dev libgtk-3-dev \
    fish zsh coreutils man-db curl wget tar zip unzip bzip2 gzip lshw btop \
    gcc make cmake automake autoconf build-essential ninja-build \
    pkg-config fontconfig fonts-noto gettext libtool libtool-bin bison fswatch \
    gnupg lsb-release apt-transport-https ca-certificates universal-ctags \
    clang clangd bear python3.11-venv \
    xdg-utils xorg xinit xss-lock x11-xserver-utils xclip copyq patch \
    alsa-utils pipewire pipewire-pulse wireplumber bluetooth bluez \
    ibus ibus-gtk ibus-gtk3 ibus-gtk4 \
    policykit-1 policykit-1-gnome dbus-x11 dunst libnotify-bin flameshot \
    nitrogen aria2 ffmpeg mpv yt-dlp libreoffice \
    syncthing transmission transmission-daemon transmission-cli \
    git docker docker-compose w3m chafa pandoc jq
if not test -e /etc/udev/rules.d/81-backlight.rules
    sudo cp $HOME/.dotfiles/81-backlight.rules /etc/udev/rules.d
end

# XDG based directory
if not test -d $HOME/xdg-ninja
    git clone https://github.com/b3nj5m1n/xdg-ninja
end
mkdir -p $HOME/.cache
mkdir -p $HOME/.config
mkdir -p $HOME/.local/share
mkdir -p $HOME/.local/state
mkdir -p $HOME/.local/src
set XDG_CACHE_HOME $HOME/.cache
set XDG_CONFIG_HOME $HOME/.config
set XDG_DATA_HOME $HOME/.local/share
set XDG_STATE_HOME $HOME/.local/state

for i in $argv
    if test $i = virtualbox
        or test $i = all
        echo "deb [signed-by=/usr/share/keyrings/oracle_vbox.gpg] https://download.virtualbox.org/virtualbox/debian $(lsb_release -cs) contrib" | sudo tee /etc/apt/sources.list.d/virtualbox.list
        wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo gpg --dearmor -o /usr/share/keyrings/oracle-vbox.gpg
        sudo apt update
        sudo apt install -y virtualbox-7.0
    end

    if test $i = protonvpn
        or test $i = all
        wget https://repo2.protonvpn.com/debian/dists/stable/main/binary-all/protonvpn-stable-release_1.0.3-3_all.deb
        sudo dpkg -i ./protonvpn-stable-release_1.0.3-3_all.deb && sudo apt update
        echo "de7ef83a663049b5244736d3eabaacec003eb294a4d6024a8fbe0394f22cc4e5  protonvpn-stable-release_1.0.3-3_all.deb" | sha256sum --check -
        sudo apt update
        rm -f ./protonvpn-stable-release_1.0.3-3_all.deb
        sudo apt install -y protonvpn-cli
    end

    if test $i = cloudflare
        or test $i = all
        curl -fsSL https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/cloudflare-client.list
        sudo apt update && sudo apt install cloudflare-warp
    end

    if test $i = ibus
        or test $i = all
        # NOTE: Install latest dwm or not working when change input mode
        echo 'deb http://download.opensuse.org/repositories/home:/lamlng/Debian_12/ /' | sudo tee /etc/apt/sources.list.d/home:lamlng.list
        curl -fsSL https://download.opensuse.org/repositories/home:lamlng/Debian_12/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/home_lamlng.gpg >/dev/null
        sudo apt update
        sudo apt install -y ibus-bamboo
    end

    if test $i = font
        or test $i = all
        rm -rf $XDG_DATA_HOME/fonts
        cp -r $HOME/.dotfiles/fonts $XDG_DATA_HOME/fonts
        fc-cache -fv
    end

    if test $i = icon
        or test $i = all
        rm -rf $XDG_DATA_HOME/icons
        cp -r $HOME/.dotfiles/icons $XDG_DATA_HOME/icons
        fc-cache -fv
    end

    if test $i = theme
        or test $i = all
        rm -rf $XDG_DATA_HOME/themes
        cp -r $HOME/.dotfiles/themes $XDG_DATA_HOME/themes
        cp -r $HOME/.dotfiles/gtk-3.0 $XDG_DATA_HOME/gtk3-0
        fc-cache -fv
    end

    if test $i = git_lfs
        or test $i = all
        curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
    end

    if test $i = fish
        test $i = all
        chsh -s $(which fish)
        mkdir -p $XDG_CONFIG_HOME/fish
        if test -e $XDG_CONFIG_HOME/fish/config.fish
            rm -f $XDG_CONFIG_HOME/fish/config.fish
        end
        ln -s $HOME/.dotfiles/config.fish $XDG_CONFIG_HOME/fish/config.fish
    end

    if test $i = zsh
        or test $i = all
        mkdir -p -p $XDG_CONFIG_HOME/zsh
        ln -s $HOME/.dotfiles/zshrc $XDG_CONFIG_HOME/zsh/.zshrc
    end

    if test $i = arttime
        or test $i = all
        # zsh -c '{url="https://gist.githubusercontent.com/poetaman/bdc598ee607e9767fe33da50e993c650/raw/d0146d258a30daacb9aee51deca9410d106e4237/arttime_online_installer.sh"; zsh -c "$(curl -fsSL $url || wget -qO- $url)"}'
        git clone https://github.com/poetaman/arttime.git $HOME/.local/src/arrtime
        cd $HOME/.local/src/arrtime
        ./install.sh
        cd $HOME
    end

    if test $i = suckless
        or test $i = all
        git clone https://git.suckless.org/dwm $HOME/.local/src/dwm
        git clone https://github.com/bakkeby/st-flexipatch.git $HOME/.local/src/st
        git clone https://git.suckless.org/dmenu $HOME/.local/src/dmenu
        git clone https://git.suckless.org/slock $HOME/.local/src/slock
        make -C $HOME/.local/src/dwm clean install
        make -C $HOME/.local/src/st clean install
        make -C $HOME/.local/src/dmenu clean install
        make -C $HOME/.local/src/slock clean install
        mkdir -p $XDG_CONFIG_HOME/X11
        ln -s $HOME/.dotfiles/xinitrc $XDG_CONFIG/X11/xinitrc
    end

    if test $i = tmux
        or test $i = all
        git clone https://github.com/tmux/tmux.git $HOME/.local/src/tmux
        cd $HOME/.local/src/tmux
        ./autogen.sh
        ./configure --prefix=$HOME/.local --enable-sixel
        make install
        cd /home/$USER
        mkdir -p $XDG_CONFIG_HOME/tmux
        ln -s $HOME/.dotfiles/tmux.conf $XDG_CONFIG_HOME/tmux/tmux.conf
    end

    if test $i = neovim
        or test $i = all
        #curl -Lo /home/$USER/nvim-linux64.tar.gz https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
        #sudo rm -rf /opt/nvim
        #sudo tar -C /opt -xzf /home/$USER/nvim-linux64.tar.gz
        #rm -f /home/$USER/nvim-linux64.tar.gz
        git clone https://github.com/neovim/neovim $HOME/.local/src/neovim
        make -C $HOME/.local/src/neovim CMAKE_BUILD_TYPE=RelWithDebInfo CMAKE_INSTALL_PREFIX=$HOME/.local/neovim
        make -C $HOME/.local/src/neovim install
        cp $HOME/.local/src/neovim/build/bin/nvim $HOME/.local/bin
        mkdir -p $XDG_CONFIG_HOME/nvim
        ln -s $HOME/.dotfiles/init.lua $XDG_CONFIG_HOME/nvim/init.lua
    end

    if test $i = fzf
        or test $i = all
        git clone --depth 1 https://github.com/junegunn/fzf.git $HOME/.local/src/fzf
        $HOME/.local/src/fzf/install --xdg
        cp $HOME/.local/src/fzf/bin/fzf $HOME/.local/bin/fzf
        # Update fzf
        # cd /home/$USER/.config/fzf && git pull && ./install
    end

    if test $i = cpan
        test $i = all
        cpan local::lib
        cpan App::cpanminus
        cpanm --force Neovim::Ext
    end

    if test $i = python
        or test $i = all
        python3 -m venv .venv
        pip install neovim baca
    end

    if test $i = rust
        or test $i = all
        curl https://sh.rustup.rs -sSf | sh
        cargo install bat ripgrep fd-find bluetui
    end

    if test $i = go
        or test $i = all
        # GO_VERSION=$(curl -s "https://go.dev/dl/" | grep -Po 'go[0-9.]*\.linux-amd64\.tar\.gz' | sort -V | tail -n 1)
        set GO_VERSION (curl -s "https://go.dev/dl/" | grep -Po 'go[0-9.]*\.linux-amd64\.tar\.gz' | sort -V | tail -n 1)
        curl -Lo $HOME/go.tar.gz "https://go.dev/dl/$GO_VERSION"
        tar -xzf $HOME/go.tar.gz -C $HOME/.local/src
        rm -f $HOME/go.tar.gz
        go install github.com/jesseduffield/lazygit@latest
        go install github.com/jesseduffield/lazydocker@latest
        go install github.com/mholt/archiver/v3/cmd/arc@latest
        #go install github.com/wader/fq@latest
        #go install github.com/mikefarah/yq/v4@latest
        #go install github.com/sibprogrammer/xq@latest
    end

    if test $i = nodejs
        or test $i = all
        # NODE_VERSION=$(curl -s "https://nodejs.org/en/download/prebuilt-binaries" | grep -Po 'v[0-9.]*' | sort -V | tail -n 1)
        set NODE_VERSION (curl -s "https://nodejs.org/en/download/prebuilt-binaries" | grep -Po 'v[0-9.]*' | sort -V | tail -n 1)
        curl -Lo $HOME/node.tar.gz "https://nodejs.org/dist/$NODE_VERSION/node-$NODE_VERSION-linux-x64.tar.gz"
        tar -xzf $HOME/node.tar.gz -C $HOME/.local/src
        mv $HOME/.local/src/$(ls $HOME/.local/src | grep -Po "node-v[0-9.]*-linux-x64" | sort -V | tail -n 1) $HOME/.local/src/nodejs
        #sudo mv /usr/local/src/(ls /usr/local/src | grep -Po 'node-v[0-9.]*-linux-x64' | sort -V | tail -n 1) /usr/local/src/nodejs
        rm -f $HOME/node.tar.gz
        npm install -g neovim tldr nb.sh
    end
end
