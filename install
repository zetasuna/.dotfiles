#!/usr/bin/bash

# Essential {{{
if [ ! -d "/home/$USER/.config" ]; then
  mkdir -p /home/$USER/.config
fi
if [ ! -d "/home/$USER/.local/share" ]; then
  mkdir -p /home/$USER/.local/share
fi
sudo apt -y install\
  gcc make cmake automake autoconf build-essential ninja-build\
  libxft-dev libx11-dev libxrandr-dev libxinerama-dev libimlib2-dev\
  libevent-dev ncurses-dev\
  pkg-config fontconfig gettext libtool libtool-bin bison fswatch\
  xclip xorg xinit x11-xserver-utils\
  fish fzf tmux man-db curl wget tar zip unzip bzip2 gzip unar lshw btop\
  aria2 yt-dlp ffmpeg patch mpv transmission-cli neomutt\
  gnupg lsb-release apt-transport-https ca-certificates universal-ctags\
  pipx
  #i3 kitty zsh vim nitrogen picom firefox-esr youtube-dl vlc 7zip
#}}}

# Font {{{
sudo rm -rf /usr/local/share/fonts
sudo cp -r /home/$USER/.dotfiles/fonts /usr/local/share/fonts
fc-cache -fv
#cp /home/$USER/.dotfiles/testfont.sh /home/$USER/testfont.sh
#chmod +x /home/$USER/testfont.sh
#}}}

# Librewolf {{{
#distro=$(if echo " una bookworm vanessa focal jammy bullseye vera uma " | grep -q " $(lsb_release -sc) "; then lsb_release -sc; else echo focal; fi)
#wget -O- https://deb.librewolf.net/keyring.gpg | sudo gpg --dearmor -o /usr/share/keyrings/librewolf.gpg
#sudo tee /etc/apt/sources.list.d/librewolf.sources << EOF > /dev/null
#Types: deb
#URIs: https://deb.librewolf.net
#Suites: $distro
#Components: main
#Architectures: amd64
#Signed-By: /usr/share/keyrings/librewolf.gpg
#EOF
#sudo apt update
#sudo apt install librewolf -y
#}}}

# Anime Cli {{{
#git clone "https://github.com/pystardust/ani-cli.git"
#sudo cp ani-cli/ani-cli /usr/local/bin
#rm -rf ani-cli
#}}}

# Virtualbox {{{
#wget -O- https://www.virtualbox.org/download/oracle_vbox_2016.asc | sudo gpg --yes --output /usr/share/keyrings/oracle-virtualbox-2016.gpg --dearmor
#sudo apt update
#sudo apt install -y virtualbox-7.0
#}}}

# ProtonVPN {{{
#wget https://repo2.protonvpn.com/debian/dists/stable/main/binary-all/protonvpn-stable-release_1.0.3-3_all.deb
#sudo dpkg -i ./protonvpn-stable-release_1.0.3-3_all.deb && sudo apt update
#echo "de7ef83a663049b5244736d3eabaacec003eb294a4d6024a8fbe0394f22cc4e5  protonvpn-stable-release_1.0.3-3_all.deb" | sha256sum --check -
#sudo apt update
#rm -f ./protonvpn-stable-release_1.0.3-3_all.deb
#sudo apt install -y protonvpn-cli
#}}}

# Ibus Bamboo {{{
#echo 'deb http://download.opensuse.org/repositories/home:/lamlng/Debian_11/ /' | sudo tee /etc/apt/sources.list.d/home:lamlng.list
#curl -fsSL https://download.opensuse.org/repositories/home:lamlng/Debian_11/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/home_lamlng.gpg > /dev/null
#sudo apt update
#sudo apt install -y ibus-bamboo
#}}}

# Suckless {{{
#if [ ! -d "/home/$USER/.config/suckless" ]; then
#	git clone https://github.com/bakkeby/dwm-flexipatch.git   /home/$USER/.config/suckless/dwm
#	git clone https://github.com/bakkeby/st-flexipatch.git    /home/$USER/.config/suckless/st
#	git clone https://github.com/bakkeby/dmenu-flexipatch.git /home/$USER/.config/suckless/dmenu
#	git clone https://github.com/bakkeby/slock-flexipatch.git /home/$USER/.config/suckless/slock
#	git clone https://git.suckless.org/slstatus               /home/$USER/.config/suckless/slstatus
#fi
#rm -f /home/$USER/.config/suckless/dwm/config.h
#rm -f /home/$USER/.config/suckless/st/config.h
#rm -f /home/$USER/.config/suckless/dmenu/config.h
#rm -f /home/$USER/.config/suckless/slock/config.h
#ln -s /home/$USER/.dotfiles/suckless/dwm_config.h   /home/$USER/.config/suckless/dwm/config.h
#ln -s /home/$USER/.dotfiles/suckless/st_config.h    /home/$USER/.config/suckless/st/config.h
#ln -s /home/$USER/.dotfiles/suckless/dmenu_config.h /home/$USER/.config/suckless/dmenu/config.h
#ln -s /home/$USER/.dotfiles/suckless/slock_config.h /home/$USER/.config/suckless/slock/config.h
#if [ ! -d "/home/$USER/.config/suckless" ]; then
#	ln -s /home/$USER/.dotfiles/suckless /home/$USER/.config/suckless
#fi
#sudo make -C "/home/$USER/.config/suckless/dwm"      clean install
#sudo make -C "/home/$USER/.config/suckless/st"       clean install
#sudo make -C "/home/$USER/.config/suckless/dmenu"    clean install
#sudo make -C "/home/$USER/.config/suckless/slock"    clean install
#sudo make -C "/home/$USER/.config/suckless/slstatus" clean install
#rm -f /home/$USER/.xinitrc
#ln -s /home/$USER/.dotfiles/.xinitrc /home/$USER/.xinitrc
#	echo "startx" >> .profile
#}}}

# Fzf {{{
#if [ ! -d "/home/$USER/.config/fzf" ]; then
#	git clone --depth 1 https://github.com/junegunn/fzf.git /home/$USER/.config/fzf
#	cd /home/$USER/.config/fzf
#	./install
#	cd /home/$USER
#	# Update fzf
#	# cd /home/$USER/.config/fzf && git pull && ./install
#fi
#}}}

# Vim {{{
#git clone https://github.com/vim/vim.git /home/$USER/.config/vim
#cd /home/$USER/.config/vim/src
#make distclean
#make
#sudo make install
#cd /home/$USER
#rm -f /home/$USER/.vimrc
#ln -s /home/$USER/.dotfiles/.vimrc /home/$USER/.vimrc
#}}}

# Neovim {{{
#curl -Lo /home/$USER/nvim-linux64.tar.gz https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
#sudo rm -rf /opt/nvim
#sudo tar -C /opt -xzf /home/$USER/nvim-linux64.tar.gz
#rm -f /home/$USER/nvim-linux64.tar.gz
sudo git clone https://github.com/neovim/neovim /usr/local/src/neovim
cd /usr/local/src/neovim
sudo make CMAKE_BUILD_TYPE=RelWithDebInfo
sudo make install
cd /home/$USER
mkdir -p /home/$USER/.config/nvim
ln -s /home/$USER/.dotfiles/init.vim /home/$USER/.config/nvim/init.vim
## Lazyvim
#if [ ! -d "/home/$USER/.config/nvim" ]; then
#	# required
#	mv ~/.config/nvim{,.bak}
#
#	# optional but recommended
#	mv ~/.local/share/nvim{,.bak}
#	mv ~/.local/state/nvim{,.bak}
#	mv ~/.cache/nvim{,.bak}
#
#	# Clone
#	git clone https://github.com/LazyVim/starter /home/$USER/.config/nvim
#	rm -rf /home/$USER/.config/nvim/.git
#fi
#}}}

# Tmux {{{
#if [ ! -d "/home/$USER/.config/tmux" ]; then
#	git clone https://github.com/tmux/tmux.git /home/$USER/.config/tmux
#	cd /home/$USER/.config/tmux
#	./autogen.sh
#	./configure --enable-sixel
#	make
#	sudo make install
#	cd /home/$USER
#fi
#mkdir -p /home/$USER/.config/tmux
#ln -s /home/$USER/.dotfiles/.tmux.conf /home/$USER/.config/tmux/tmux.conf
#ln -s /home/$USER/.dotfiles/.tmux.conf.local /home/$USER/.config/tmux/tmux.conf.local
#ln -s /home/$USER/.dotfiles/.tmux.conf /home/$USER/.tmux.conf
#ln -s /home/$USER/.dotfiles/.tmux.conf.local /home/$USER/.tmux.conf.local
#}}}

# Zsh {{{
#rm -f /home/$USER/.zshrc
#ln -s /home/$USER/.dotfiles/.zshrc /home/$USER/.zshrc
#chsh -s $(which zsh)
## Zsh Plugin
#if [ ! -d "/home/$USER/.config/powerlevel10k" ]; then
#	git clone --depth=1 https://github.com/romkatv/powerlevel10k.git /home/$USER/.config/powerlevel10k
#fi
#
##if [ ! -d "/home/$USER/.config/zsh-autocomplete" ]; then
##	git clone --depth 1 https://github.com/marlonrichert/zsh-autocomplete.git /home/$USER/.config/zsh-autocomplete
##fi
#
#if [ ! -d "/home/$USER/.config/zsh-completions" ]; then
#	git clone https://github.com/zsh-users/zsh-completions.git /home/$USER/.config/zsh-completions
#fi
#
#if [ ! -d "/home/$USER/.config/fzf-tab" ]; then
#	git clone https://github.com/Aloxaf/fzf-tab /home/$USER/.config/fzf-tab
#fi
#
#if [ ! -d "/home/$USER/.config/zsh-autosuggestions" ]; then
#	git clone https://github.com/zsh-users/zsh-autosuggestions /home/$USER/.config/zsh-autosuggestions
#fi
#
#if [ ! -d "/home/$USER/.config/zsh-syntax-highlighting" ]; then
#	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /home/$USER/.config/zsh-syntax-highlighting
#fi
#}}}

# Bash {{{
cat <<'EOF' >> /home/$USER/.profile
export PATH="/home/$USER/.local/pipx/shared/bin:/home/$USER/.cargo/bin:/home/$USER/perl5/bin:/usr/local/src/go/bin:/usr/local/src/nodejs/bin:$PATH"
PERL5LIB="/home/$USER/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/home/$USER/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/home/$USER/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/home/$USER/perl5"; export PERL_MM_OPT;
EOF
. /home/$USER/.profile
#}}}

# Fish {{{
chsh -s $(which fish)
mkdir -p /home/$USER/.config/fish
ln -s /home/$USER/.dotfiles/config.fish /home/$USER/.config/fish/config.fish
if ! grep -q "fisher" /home/$USER/.config/fish/fish_plugins; then
  fish -c 'curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher'
  fish -c 'fisher install IlanCosman/tide@v6'
  fish -c 'fisher install jethrokuan/fzf'
fi
  fish -c 'set -U FZF_COMPLETE 3'
  fish -c 'set -Ux FZF_DEFAULT_OPTS "--color=fg:#f8f8f2,bg:#282a36,hl:#bd93f9 --color=fg+:#f8f8f2,bg+:#44475a,hl+:#bd93f9 --color=info:#ffb86c,prompt:#50fa7b,pointer:#ff79c6 --color=marker:#ff79c6,spinner:#ffb86c,header:#6272a4 --height=50%  --reverse --multi --info=default --prompt=\" \" --pointer= --marker= --preview-window=right:60%"'
  fish -c 'set -U FZF_FIND_FILE_COMMAND "find -L -type f"'
  fish -c 'set -U FZF_PREVIEW_DIR_CMD "ls -alhv --color=always --group-directories-first"'
  fish -c 'set -U FZF_PREVIEW_FILE_CMD "bat -n --color=always --theme=Dracula"'
  fish -c 'set -Ua fish_user_paths /home/$USER/.local/pipx/shared/bin /home/$USER/.cargo/bin /home/$USER/perl5/bin /usr/local/src/go/bin /usr/local/src/nodejs/bin'
#}}}

# Perl (CPAN) {{{
cpan local::lib
cpan App::cpanminus
cpanm Neovim::Ext
#}}}

# Python (PIPX) {{{
pipx install neovim
pip install neovim
#}}}

# Rust (CARGO) {{{
curl https://sh.rustup.rs -sSf | sh
cargo install bat ripgrep fd-find
#}}}

# Go {{{
GO_VERSION=$(curl -s "https://go.dev/dl/" | grep -Po 'go[0-9.]*\.linux-amd64\.tar\.gz' | sort -V | tail -n 1)
#set GO_VERSION (curl -s "https://go.dev/dl/" | grep -Po 'go[0-9.]*\.linux-amd64\.tar\.gz' | sort -V | tail -n 1)
curl -Lo /home/$USER/go.tar.gz "https://go.dev/dl/{$GO_VERSION}"
sudo tar -xzf /home/$USER/go.tar.gz -C /usr/local/src
rm -f /home/$USER/go.tar.gz
go install github.com/jesseduffield/lazygit@latest
go install github.com/jesseduffield/lazydocker@latest
#go install github.com/wader/fq@latest
#go install github.com/mikefarah/yq/v4@latest
#go install github.com/sibprogrammer/xq@latest
#}}}

# NodeJs (NPM) {{{
NODE_VERSION=$(curl -s "https://nodejs.org/en/download/prebuilt-binaries" | grep -Po 'v[0-9.]*' | sort -V | tail -n 1)
#set NODE_VERSION (curl -s "https://nodejs.org/en/download/prebuilt-binaries" | grep -Po 'v[0-9.]*' | sort -V | tail -n 1)
curl -Lo /home/$USER/node.tar.gz "https://nodejs.org/dist/{$NODE_VERSION}/node-{$NODE_VERSION}-linux-x64.tar.gz"
sudo tar -xzf /home/$USER/node.tar.gz -C /usr/local/src
sudo mv /usr/local/src/$(ls /usr/local/src | grep -Po "node-v[0-9.]*-linux-x64" | sort -V | tail -n 1) /usr/local/src/nodejs
#sudo mv /usr/local/src/(ls /usr/local/src | grep -Po 'node-v[0-9.]*-linux-x64' | sort -V | tail -n 1) /usr/local/src/nodejs
rm -f /home/$USER/node.tar.gz
npm install -g neovim tldr
#}}}
