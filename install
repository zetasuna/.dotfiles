#!/usr/bin/sh

sudo apt -y install\
	xorg xinit x11-xserver-utils fswatch build-essential ninja-build\
	libxft-dev libx11-dev libxrandr-dev libxinerama-dev libimlib2-dev libevent-dev ncurses-dev bison\
	zsh curl wget unzip man make cmake gcc automake autoconf pkg-config fontconfig gettext libtool\
	lshw btop jq\
       	#i3 kitty nitrogen picom firefox-esr youtube-dl vlc 7zip
	
if [ ! -d "/home/$USER/.config" ]; then
	mkdir -p /home/$USER/.config
fi
if [ ! -d "/home/$USER/.local/share" ]; then
	mkdir -p /home/$USER/.local/share
fi

# Font {{{
rm -rf /home/$USER/.local/share/fonts
ln -s /home/$USER/.dotfiles/fonts /home/$USER/.local/share/fonts
fc-cache -fv
chmod +x /home/$USER/.local/share/test-fonts.sh
#}}}

# Suckless {{{
#if [ ! -d "/home/$USER/.config/suckless" ]; then
#	git clone https://github.com/bakkeby/dwm-flexipatch.git   /home/$USER/.config/suckless/dwm
#	git clone https://github.com/bakkeby/st-flexipatch.git    /home/$USER/.config/suckless/st
#	git clone https://github.com/bakkeby/dmenu-flexipatch.git /home/$USER/.config/suckless/dmenu
#	git clone https://github.com/bakkeby/slock-flexipatch.git /home/$USER/.config/suckless/slock
#	git clone https://git.suckless.org/slstatus               /home/$USER/.config/suckless/slstatus
#fi
#rm -f /home/$USER/.config/suckless/dwm/config.h
#rm -f /home/$USER/.config/suckless/st/config.h
#rm -f /home/$USER/.config/suckless/dmenu/config.h
#rm -f /home/$USER/.config/suckless/slock/config.h
#ln -s /home/$USER/.dotfiles/suckless/dwm_config.h   /home/$USER/.config/suckless/dwm/config.h
#ln -s /home/$USER/.dotfiles/suckless/st_config.h    /home/$USER/.config/suckless/st/config.h
#ln -s /home/$USER/.dotfiles/suckless/dmenu_config.h /home/$USER/.config/suckless/dmenu/config.h
#ln -s /home/$USER/.dotfiles/suckless/slock_config.h /home/$USER/.config/suckless/slock/config.h
#if [ ! -d "/home/$USER/.config/suckless" ]; then
#	ln -s /home/$USER/.dotfiles/suckless /home/$USER/.config/suckless
#fi
#sudo make -C "/home/$USER/.config/suckless/dwm"      clean install
#sudo make -C "/home/$USER/.config/suckless/st"       clean install
#sudo make -C "/home/$USER/.config/suckless/dmenu"    clean install
#sudo make -C "/home/$USER/.config/suckless/slock"    clean install
#sudo make -C "/home/$USER/.config/suckless/slstatus" clean install
#rm -f /home/$USER/.xinitrc
#ln -s /home/$USER/.dotfiles/.xinitrc /home/$USER/.xinitrc
#	echo "startx" >> .profile
#}}}

# Tmux {{{
if [ ! -d "/home/$USER/.config/tmux" ]; then
	git clone https://github.com/tmux/tmux.git /home/$USER/.config/tmux
	cd /home/$USER/.config/tmux
	sh ./autogen.sh
	sh ./configure --enable-sixel
	make && sudo make install
	cd /home/$USER
fi
#}}}

# Zsh {{{
rm -f /home/$USER/.zshrc
ln -s /home/$USER/.dotfiles/.zshrc /home/$USER/.zshrc
chsh -s $(which zsh)
# Zsh Plugin
if [ ! -d "/home/$USER/.config/powerlevel10k" ]; then
	git clone --depth=1 https://github.com/romkatv/powerlevel10k.git /home/$USER/.config/powerlevel10k
fi

#if [ ! -d "/home/$USER/.config/zsh-autocomplete" ]; then
#	git clone --depth 1 https://github.com/marlonrichert/zsh-autocomplete.git /home/$USER/.config/zsh-autocomplete
#fi

if [ ! -d "/home/$USER/.config/zsh-completions" ]; then
	git clone https://github.com/zsh-users/zsh-completions.git /home/$USER/.config/zsh-completions
fi

if [ ! -d "/home/$USER/.config/fzf-tab" ]; then
	git clone https://github.com/Aloxaf/fzf-tab /home/$USER/.config/fzf-tab
fi

if [ ! -d "/home/$USER/.config/zsh-autosuggestions" ]; then
	git clone https://github.com/zsh-users/zsh-autosuggestions /home/$USER/.config/zsh-autosuggestions
fi

if [ ! -d "/home/$USER/.config/zsh-syntax-highlighting" ]; then
	git clone https://github.com/zsh-users/zsh-syntax-highlighting.git /home/$USER/.config/zsh-syntax-highlighting
fi
#}}}

# Fzf {{{
if [ ! -d "/home/$USER/.config/fzf" ]; then
	git clone --depth 1 https://github.com/junegunn/fzf.git /home/$USER/.config/fzf
	cd /home/$USER/.config/fzf && ./install
	cd /home/$USER
	# Update fzf
	# cd /home/$USER/.config/fzf && git pull && ./install
fi
#}}}

exec zsh

# Rust {{{
curl https://sh.rustup.rs -sSf | sh 
cargo install bat ripgrep fd-find navi
#}}}

# Go {{{
GO_VERSION=$(curl -s "https://go.dev/dl/" | grep -Po 'go[0-9.]*\.linux-amd64\.tar\.gz' | sort -V | tail -n 1)
curl -Lo /home/$USER/go.tar.gz "https://go.dev/dl/{$GO_VERSION}" 
tar -xf /home/$USER/go.tar.gz -C /home/$USER
mv /home/$USER/go /home/$USER/.goroot
rm -f /home/$USER/go.tar.gz 
go install github.com/jesseduffield/lazygit@latest
go install github.com/wader/fq@latest
go install github.com/mikefarah/yq/v4@latest
go install github.com/sibprogrammer/xq@latest
#}}}

# NodeJs(NPM) {{{
NODE_VERSION=$(curl -s "https://nodejs.org/en/download/prebuilt-binaries" | grep -Po 'v[0-9.]*' | sort -V | tail -n 1)
curl -Lo /home/$USER/node.tar.gz "https://nodejs.org/dist/${NODE_VERSION}/node-${NODE_VERSION}-linux-x64.tar.gz"
tar -xf/home/$USER/node.tar.gz -C /home/$USER
mv /home/$USER/$(ls | grep -Po "node-v[0-9.]*-linux-x64" | sort -V | tail -n 1) /home/$USER/.nodejs
rm -f /home/$USER/node.tar.gz
npm install -g tldr
#}}}

# Vim {{{
#sudo apt -y install vim
#rm -f /home/$USER/.vimrc
#ln -s /home/$USER/.dotfiles/.vimrc /home/$USER/.vimrc
#}}}

# Neovim {{{
curl -Lo /home/$USER/nvim.linux64.tar.gz https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz
sudo rm -rf /opt/nvim
sudo tar -C /opt -xzf nvim-linux64.tar.gz
rm -rf /home/$USER/nvim-linux64.tar.gz
# Lazyvim
if [ ! -d "/home/$USER/.config/nvim" ]; then
	# required
	mv ~/.config/nvim{,.bak}

	# optional but recommended
	mv ~/.local/share/nvim{,.bak}
	mv ~/.local/state/nvim{,.bak}
	mv ~/.cache/nvim{,.bak}	

	# Clone
	git clone https://github.com/LazyVim/starter /home/$USER/.config/nvim	
	rm -rf /home/$USER/.config/nvim/.git
fi
#}}}

