-- Clone 'mini.nvim' manually in a way that it gets managed by 'mini.deps'
local path_package = vim.fn.stdpath('data') .. '/site/'
local mini_path = path_package .. 'pack/deps/start/mini.nvim'
if not vim.loop.fs_stat(mini_path) then
    vim.cmd('echo "Installing `mini.nvim`" | redraw')
    local clone_cmd = {
        'git', 'clone', '--filter=blob:none',
        'https://github.com/echasnovski/mini.nvim', mini_path
    }
    vim.fn.system(clone_cmd)
    vim.cmd('packadd mini.nvim | helptags ALL')
    vim.cmd('echo "Installed `mini.nvim`" | redraw')
end

-- Set up 'mini.deps' (customize to your liking)
require('mini.deps').setup({ path = { package = path_package } })

local add, now, later = MiniDeps.add, MiniDeps.now, MiniDeps.later

now(function()
    vim.g.mapleader      = ' '
    vim.o.backup         = false
    vim.o.number         = true
    vim.o.relativenumber = true
    vim.o.laststatus     = 2
    vim.o.list           = true
    vim.o.background     = 'dark'
    vim.o.listchars      = table.concat({ 'extends:…', 'nbsp:␣', 'precedes:…', 'tab:> ' }, ',')
    vim.o.autoindent     = true
    vim.o.shiftwidth     = 4
    vim.o.tabstop        = 4
    vim.o.expandtab      = true
    vim.o.scrolloff      = 10
    vim.o.clipboard      = "unnamed,unnamedplus"
    -- vim.opt.statuscolumn = '%=%{v:lnum}│%{v:relnum}'
    vim.opt.iskeyword:append('-')
    vim.o.spelllang    = 'de,en'
    vim.o.spelloptions = 'camel'
    vim.opt.complete:append('kspell')


    vim.cmd('filetype plugin indent on')
    -- vim.cmd('colorscheme modus-tinted')
end)

if vim.g.neovide then
    vim.o.guifont = "JetBrainsMonoNL Nerd Font:h10"
end

later(function() require('mini.ai').setup() end)
later(function() require('mini.align').setup() end)
later(function()
    -- This is needed for mini.animate to work with mouse scrolling
    vim.opt.mousescroll = 'ver:1,hor:1'
    local animate = require('mini.animate')
    animate.setup {
        scroll = {
            -- Disable Scroll Animations, as the can interfer with mouse Scrolling
            enable = true,
        },
        cursor = {
            timing = animate.gen_timing.cubic({ duration = 50, unit = 'total' })
        },
    }
end)
-- Disabled Here. This is called directly from our Colorscheme in the colors/ folder
-- You can enable this by uncommenting.
-- We provide a basic Catppuccin Colorscheme here
-- later(function()
--     require('mini.base16').setup({
--         palette = {
--             base00 = '#1e1e2e',
--             base01 = '#181825',
--             base02 = '#313244',
--             base03 = '#45475a',
--             base04 = '#585b70',
--             base05 = '#cdd6f4',
--             base06 = '#f5e0dc',
--             base07 = '#b4befe',
--             base08 = '#f38ba8',
--             base09 = '#fab387',
--             base0A = '#f9e2af',
--             base0B = '#a6e3a1',
--             base0C = '#94e2d5',
--             base0D = '#89b4fa',
--             base0E = '#cba6f7',
--             base0F = '#f2cdcd'
--         }
--     })
-- end)
later(function()
    require('mini.basics').setup({
        options = {
            basic = true,
            extra_ui = true,
            win_borders = 'bold',
        },
        mappings = {
            basic = true,
            windows = true,
        },
        autocommands = {
            basic = true,
            relnum_in_visual_mode = true,
        }
    })
end)
later(function() require('mini.bracketed').setup() end)
later(function() require('mini.bufremove').setup() end)
later(function()
    require('mini.clue').setup({
        triggers = {
            -- Leader triggers
            { mode = 'n', keys = '<Leader>' },
            { mode = 'x', keys = '<Leader>' },

            { mode = 'n', keys = '\\' },

            -- Built-in completion
            { mode = 'i', keys = '<C-x>' },

            -- `g` key
            { mode = 'n', keys = 'g' },
            { mode = 'x', keys = 'g' },

            -- Marks
            { mode = 'n', keys = "'" },
            { mode = 'n', keys = '`' },
            { mode = 'x', keys = "'" },
            { mode = 'x', keys = '`' },

            -- Registers
            { mode = 'n', keys = '"' },
            { mode = 'x', keys = '"' },
            { mode = 'i', keys = '<C-r>' },
            { mode = 'c', keys = '<C-r>' },

            -- Window commands
            { mode = 'n', keys = '<C-w>' },

            -- `z` key
            { mode = 'n', keys = 'z' },
            { mode = 'x', keys = 'z' },
        },

        clues = {
            { mode = 'n', keys = '<Leader>b', desc = ' Buffer' },
            { mode = 'n', keys = '<Leader>f', desc = ' Find' },
            { mode = 'n', keys = '<Leader>g', desc = '󰊢 Git' },
            { mode = 'n', keys = '<Leader>i', desc = '󰏪 Insert' },
            { mode = 'n', keys = '<Leader>l', desc = '󰘦 LSP' },
            { mode = 'n', keys = '<Leader>q', desc = ' NVim' },
            { mode = 'n', keys = '<Leader>s', desc = '󰆓 Session' },
            { mode = 'n', keys = '<Leader>u', desc = '󰔃 UI' },
            { mode = 'n', keys = '<Leader>w', desc = ' Window' },
            require('mini.clue').gen_clues.g(),
            require('mini.clue').gen_clues.builtin_completion(),
            require('mini.clue').gen_clues.marks(),
            require('mini.clue').gen_clues.registers(),
            require('mini.clue').gen_clues.windows(),
            require('mini.clue').gen_clues.z(),
        },
        window = {
            delay = 300
        }
    })
end)
-- later(function() require('mini.colors').setup() end)
later(function() require('mini.comment').setup() end)
later(function()
    require('mini.completion').setup({
        mappings = {
            go_in = '<RET>',
        },
        window = {
            info = { border = 'rounded' },
            signature = { border = 'rounded' },
        }
    })
end)
later(function() require('mini.cursorword').setup() end)
later(function()
    require('mini.diff').setup({
        view = {
            style = 'sign',
            signs = { add = '█', change = '▒', delete = '' }
        }
    })
end)
later(function() require('mini.doc').setup() end)
later(function() require('mini.extra').setup() end)
later(function()
    require('mini.files').setup({
        windows = {
            preview = true,
            width_preview = 80,
        }
    })
end)
later(function() require('mini.fuzzy').setup() end)
later(function() require('mini.git').setup() end)
now(function()
    local hipatterns = require('mini.hipatterns')

    local censor_extmark_opts = function(_, match, _)
        local mask = string.rep('*', vim.fn.strchars(match))
        return {
            virt_text = { { mask, 'Comment' } },
            virt_text_pos = 'overlay',
            priority = 200,
            right_gravity = false,
        }
    end

    local password_table = {
        pattern = {
            'password: ()%S+()',
            'password_usr: ()%S+()',
            '.*_pw: ()%S+()',
            'password_.*: ()%S+()',
            'gpg_pass: ()%S+()',
        },
        group = '',
        extmark_opts = censor_extmark_opts
    }
    -- TODO Make the "mask" Text a variale based on the match
    local mattern_extmark_opts = function(_, match, _)
        local mask = 'Rollout new Backup'
        return {
            virt_text = { { mask, 'FoldColumn' } },
            virt_text_pos = 'eol',
            priority = 199,
            right_gravity = true,
        }
    end

    local mattern_table = {
        pattern = {
            '.*backup_path:'
        },
        group = '',
        extmark_opts = mattern_extmark_opts
    }

    hipatterns.setup({
        highlighters = {
            -- Highlight standalone 'FIXME', 'HACK', 'TODO', 'NOTE'
            fixme     = { pattern = '%f[%w]()FIXME()%f[%W]', group = 'MiniHipatternsFixme' },
            hack      = { pattern = '%f[%w]()HACK()%f[%W]', group = 'MiniHipatternsHack' },
            todo      = { pattern = '%f[%w]()TODO()%f[%W]', group = 'MiniHipatternsTodo' },
            note      = { pattern = '%f[%w]()NOTE()%f[%W]', group = 'MiniHipatternsNote' },

            -- Cloaking Passwords
            pw        = password_table,
            mattern   = mattern_table,

            -- Highlight hex color strings (`#rrggbb`) using that color
            hex_color = hipatterns.gen_highlighter.hex_color(),
        },
    })

    vim.keymap.set("n", "<leader>up", function()
        if next(hipatterns.config.highlighters.pw) == nil then
            hipatterns.config.highlighters.pw = password_table
        else
            hipatterns.config.highlighters.pw = {}
        end
        vim.cmd('edit')
    end, { desc = 'Toggle Password Cloaking' })
end)
-- We disable this, as we use our own Colorscheme through mini.colors
-- You can enable this by uncommenting
-- We Provide a Modus Vivendi inspired setup here
later(function()
    require('mini.hues').setup({
        background = '#212030',
        foreground = '#c6c6cd',
        accent     = 'cyan',
        saturation = 'medium'
    })
end)

later(function()
    require('mini.indentscope').setup({
        draw = {
            animation = function() return 1 end,
        },
        symbol = "│"
    })
end)
later(function() require('mini.jump').setup() end)
later(function() require('mini.jump2d').setup() end)
later(function() require('mini.map').setup() end)
later(function() require('mini.misc').setup() end)
later(function() require('mini.move').setup({}) end)
later(function()
    -- We took this from echasnovski's personal configuration
    -- https://github.com/echasnovski/nvim/blob/master/init.lua
    local filterout_lua_diagnosing = function(notif_arr)
        local not_diagnosing = function(notif) return not vim.startswith(notif.msg, 'lua_ls: Diagnosing') end
        notif_arr = vim.tbl_filter(not_diagnosing, notif_arr)
        return MiniNotify.default_sort(notif_arr)
    end
    require('mini.notify').setup({
        content = { sort = filterout_lua_diagnosing },
        window = { config = { border = 'double' } },
    })
    -- vim.notify = MiniNotify.make_notify()
end)
later(function() require('mini.operators').setup() end)
later(function() require('mini.pairs').setup() end)
later(function()
    local win_config = function()
        height = math.floor(0.618 * vim.o.lines)
        width = math.floor(0.618 * vim.o.columns)
        return {
            anchor = 'NW',
            height = height,
            width = width,
            border = 'rounded',
            row = math.floor(0.5 * (vim.o.lines - height)),
            col = math.floor(0.5 * (vim.o.columns - width)),
        }
    end
    require('mini.pick').setup({
        mappings = {
            choose_in_vsplit = '<C-CR>',
        },
        options = {
            use_cache = true
        },
        window = {
            config = win_config
        }
    })
    vim.ui.select = MiniPick.ui_select
end)
now(function()
    require('mini.sessions').setup({
        autowrite = true
    })
end)
later(function() require('mini.splitjoin').setup() end)
now(function()
    require('mini.starter').setup({
        autoopen = true,
        items = {
            require('mini.starter').sections.builtin_actions(),
            require('mini.starter').sections.recent_files(5, false),
            require('mini.starter').sections.recent_files(5, true),
            require('mini.starter').sections.sessions(5, true),
        },
        header = [[
        ███╗   ███╗██╗   ██╗██╗███╗   ███╗
        ████╗ ████║██║   ██║██║████╗ ████║
        ██╔████╔██║██║   ██║██║██╔████╔██║
        ██║╚██╔╝██║╚██╗ ██╔╝██║██║╚██╔╝██║
        ██║ ╚═╝ ██║ ╚████╔╝ ██║██║ ╚═╝ ██║
        ██║     ██║  ╚═══╝  ╚═╝██║     ██║
        ██║     ██║ini      nvi██║     ██║
        ╚═╝     ╚═╝            ╚═╝     ╚═╝]],
    })
end)
-- later(function()
--     local statusline = require 'mini.statusline'
--     -- set use_icons to true if you have a Nerd Font
--     statusline.setup { use_icons = true }
--     -- You can configure sections in the statusline by overriding their
--     -- default behavior. For example, here we set the section for
--     -- cursor location to LINE:COLUMN
--     ---@diagnostic disable-next-line: duplicate-set-field
--     statusline.section_location = function()
--         return '%2l:%-2v'
--     end
-- end)
later(function() require('mini.surround').setup() end)
later(function() require('mini.tabline').setup() end)
later(function() require('mini.trailspace').setup() end)
later(function() require('mini.visits').setup() end)

later(function()
    add({
        source = 'neovim/nvim-lspconfig',
        depends = {
            'williamboman/mason.nvim',
            'williamboman/mason-lspconfig.nvim'
        }
    })
    require('mason').setup()
    require('mason-lspconfig').setup()
    require('lspconfig').pyright.setup {}
    require('lspconfig').ruff.setup {}
    require('lspconfig').ruff_lsp.setup {}
    require('lspconfig').cssls.setup {}
    require('lspconfig').bashls.setup {}
    require('lspconfig').lua_ls.setup {
        settings = {
            Lua = {
                diagnostics = {
                    disable = { "lowercase-global", "undefined-global" }
                },
            }
        }
    }
    require('lspconfig').ansiblels.setup {
        settings = {
            ansible = {
                python = {
                    interpreterPath = 'python',
                },
                ansible = {
                    path = 'ansible',
                },
                executionEnvironment = {
                    enabled = false,
                },
                validation = {
                    enabled = true,
                    lint = {
                        enabled = true,
                        path = 'ansible-lint',
                        arguments = '-c /home/dosa/.config/ansible-lint.yml'
                    },
                },
            },
        },
    }
    require('lspconfig').yamlls.setup {}
end)

later(function()
    add({
        source = 'nvim-treesitter/nvim-treesitter'
    })
    require('nvim-treesitter.configs').setup({
        ensure_installed = { 'lua', 'yaml' },
        auto_install = true,
        highlight = { enable = true, disable = { 'ini' } },
        indent = { enable = true }
    })
end)

later(function()
    add({
        source = 'ibhagwan/fzf-lua'
    })
    require('fzf-lua').setup({})
end)

-- Automatically close terminal Buffers when their Process is done
vim.api.nvim_create_autocmd("TermClose", {
    callback = function()
        vim.cmd("bdelete")
    end
})

-- Disable Linenumbers in Terminals
vim.api.nvim_create_autocmd("TermEnter", {
    callback = function()
        vim.o.number = false
        vim.o.relativenumber = false
    end
})

-- vim.api.nvim_set_hl(0, 'MiniTablineCurrent', { link = 'IncSearch' } )
-- -- vim.api.nvim_set_hl(0, 'MiniTablineVisible', { link = } )
-- vim.api.nvim_set_hl(0, 'MiniTablineHidden', { link = 'Tabline'} )
-- vim.api.nvim_set_hl(0, 'MiniTablineModifiedCurrent', { link = 'DiffDelete' } )
-- vim.api.nvim_set_hl(0, 'MiniTablineModifiedVisible', { link = 'ErrorMsg' } )
-- vim.api.nvim_set_hl(0, 'MiniTablineModifiedHidden', { link = 'ErrorMsg' } )
-- vim.api.nvim_set_hl(0, 'MiniTablineFill', { link = 'Normal' } )
-- -- vim.api.nvim_set_hl(0, 'MiniTablineTabpagesection', { link = } )

-- ╔═══════════════════════╗
-- ║    Local Variables    ║
-- ╚═══════════════════════╝
local keymap = vim.keymap.set

local split_sensibly = function()
    if vim.api.nvim_win_get_width(0) > math.floor(vim.api.nvim_win_get_height(0) * 2.3) then
        vim.cmd("vs")
    else
        vim.cmd("split")
    end
end

-- require('mini.pick') Colorscheme Picker
local set_colorscheme = function(name) pcall(vim.cmd, 'colorscheme ' .. name) end
local pick_colorscheme = function()
    local init_scheme = vim.g.colors_name
    local new_scheme = require('mini.pick').start({
        source = {
            items = vim.fn.getcompletion("", "color"),
            preview = function(_, item)
                set_colorscheme(item)
            end,
            choose = set_colorscheme
        },
        mappings = {
            preview = {
                char = '<C-p>',
                func = function()
                    local item = require('mini.pick').get_picker_matches()
                    pcall(vim.cmd, 'colorscheme ' .. item.current)
                end
            }
        }
    })
    if new_scheme == nil then set_colorscheme(init_scheme) end
end

-- ╔═══════════════════════╗
-- ║    General Keymaps    ║
-- ╚═══════════════════════╝
keymap("n", "<leader>wq", "<cmd>wqa<cr>", { noremap = true, silent = true, desc = 'Quit' })
keymap("", "ö", ":")

-- ╔════════════════════╗
-- ║    Find Keymaps    ║
-- ╚════════════════════╝
keymap("n", "<leader>fs", function() require('mini.pick').builtin.files() end,
{ noremap = true, silent = true, desc = 'Find File' })
keymap("n", "<leader>fa", function() require('mini.pick').builtin.resume() end,
{ noremap = true, silent = true, desc = 'Find File' })
keymap("n", "<leader>e", function()
    local buffer_name = vim.api.nvim_buf_get_name(0)
    if buffer_name == "" or string.match(buffer_name, "Starter") then
        require('mini.files').open(vim.loop.cwd())
    else
        require('mini.files').open(vim.api.nvim_buf_get_name(0))
    end
end,
{ noremap = true, silent = true, desc = 'Find Manualy' })
keymap("n", "<leader><space>", function() require('mini.pick').builtin.buffers() end,
{ noremap = true, silent = true, desc = 'Find Buffer' })
keymap("n", "<leader>fg", function() require('mini.pick').builtin.grep_live() end,
{ noremap = true, silent = true, desc = 'Find String' })
keymap("n", "<leader>fg", function() require('fzf-lua').live_grep() end,
{ noremap = true, silent = true, desc = 'Find String' })
keymap("n", "<leader>fwg", function()
    local wrd = vim.fn.expand("<cWORD>")
    require('mini.pick').builtin.grep_live({ pattern = wrd })
end,
{ noremap = true, silent = true, desc = 'Find String Cursor' })
keymap("n", "<leader>fh", function() require('mini.pick').builtin.help() end,
{ noremap = true, silent = true, desc = 'Find Help' })
keymap("n", "<leader>fl", function() require('mini.extra').pickers.hl_groups() end,
{ noremap = true, silent = true, desc = 'Find HL Groups' })
keymap("n", "<leader>fc", pick_colorscheme, { noremap = true, silent = true, desc = 'Change Colorscheme' })
keymap('n', ',', function() require('mini.extra').pickers.buf_lines({ scope = 'current' }) end, { nowait = true })

-- ╔═══════════════════════╗
-- ║    Session Keymaps    ║
-- ╚═══════════════════════╝
keymap("n", "<leader>ss", function()
    vim.cmd('wa')
    require('mini.sessions').write()
    require('mini.sessions').select()
end, { noremap = true, silent = true, desc = 'Switch Session' })
keymap("n", "<leader>sw", function()
    local cwd = vim.fn.getcwd()
    local last_folder = cwd:match("([^/]+)$")
    require('mini.sessions').write(last_folder)
end, { noremap = true, silent = true, desc = 'Save Session' })
keymap("n", "<leader>sf", function() require('mini.sessions').select() end,
{ noremap = true, silent = true, desc = 'Load Session' })

-- ╔═══════════════════════╗
-- ║    Editing Keymaps    ║
-- ╚═══════════════════════╝
-- Insert a Password at point
keymap("n", "<leader>ip",
function()
    local command = 'pwgen -N 1 -B 32'
    for _, line in ipairs(vim.fn.systemlist(command)) do
        vim.api.nvim_put({ line }, '', true, true)
    end
end,
{ noremap = true, silent = true, desc = 'Insert Password' })

-- ╔══════════════════════╗
-- ║    Buffer Keymaps    ║
-- ╚══════════════════════╝
keymap("n", "<leader>bd", "<cmd>bd<cr>", { noremap = true, silent = true, desc = 'Close Buffer' })
keymap("n", "<leader>bq", "<cmd>%bd|e#<cr>", { noremap = true, silent = true, desc = 'Close other Buffers' })
keymap("n", "<S-l>", "<cmd>bnext<cr>", { silent = true, desc = 'Next Buffer' })
keymap("n", "<S-h>", "<cmd>bprevious<cr>", { silent = true, desc = 'Previous Buffer' })
keymap("n", "<TAB>", "<C-^>", { noremap = true, silent = true, desc = "Alternate buffers" })
-- Format Buffer
-- With and without LSP
if vim.tbl_isempty(vim.lsp.buf_get_clients()) then
    keymap("n", "<leader>bf", function() vim.lsp.buf.format() end,
    { noremap = true, silent = true, desc = 'Format Buffer' })
else
    keymap("n", "<leader>bf", "gg=G<C-o>", { noremap = true, silent = true, desc = 'Format Buffer' })
end

-- ╔═══════════════════╗
-- ║    Git Keymaps    ║
-- ╚═══════════════════╝
keymap("n", "<leader>gb", function() require('mini.extra').pickers.git_commits({ path = vim.fn.expand('%:p') }) end,
{ desc = 'Git Log this File' })
keymap("n", "<leader>gl", function()
    split_sensibly()
    vim.cmd('terminal lazygit')
end, { noremap = true, silent = true, desc = 'Lazygit' })
keymap("n", "<leader>gp", "<cmd>:Git pull<cr>", { noremap = true, silent = true, desc = 'Git Push' })
keymap("n", "<leader>gs", "<cmd>:Git push<cr>", { noremap = true, silent = true, desc = 'Git Pull' })
keymap("n", "<leader>ga", "<cmd>:Git add .<cr>", { noremap = true, silent = true, desc = 'Git Add All' })
keymap("n", "<leader>gc", '<cmd>:Git commit -m "Autocommit from MVIM"<cr>',
{ noremap = true, silent = true, desc = 'Git Autocommit' })
keymap("", "<leader>gh", function() require('mini.git').show_range_history() end,
{ noremap = true, silent = true, desc = 'Git Range History' })
keymap("n", "<leader>gx", function() require('mini.git').show_at_cursor() end,
{ noremap = true, silent = true, desc = 'Git Context Cursor' })

-- ╔═══════════════════╗
-- ║    LSP Keymaps    ║
-- ╚═══════════════════╝
keymap("n", "<leader>ld", function() vim.lsp.buf.definition() end,
{ noremap = true, silent = true, desc = 'Go To Definition' })
keymap("n", "<leader>ls", "<cmd>Pick lsp scope='document_symbol'<cr>",
{ noremap = true, silent = true, desc = 'Show all Symbols' })
keymap("n", "<leader>lr", function() vim.lsp.buf.rename() end, { noremap = true, silent = true, desc = 'Rename This' })
keymap("n", "<leader>la", function() vim.lsp.buf.code_action() end,
{ noremap = true, silent = true, desc = 'Code Actions' })

-- ╔══════════════════╗
-- ║    UI Keymaps    ║
-- ╚══════════════════╝
-- Window Navigation
keymap("n", "<leader>wl", "<cmd>wincmd l<cr>", { noremap = true, silent = true, desc = 'Focus Left' })
keymap("n", "<leader>wk", "<cmd>wincmd k<cr>", { noremap = true, silent = true, desc = 'Focus Up' })
keymap("n", "<leader>wj", "<cmd>wincmd j<cr>", { noremap = true, silent = true, desc = 'Focus Down' })
keymap("n", "<leader>wh", "<cmd>wincmd h<cr>", { noremap = true, silent = true, desc = 'Focus Right' })
-- Alternate Window Navigation
-- keymap('n', '<S-h>', '<C-w><C-h>', { desc = 'Move focus to the left window' })
-- keymap('n', '<S-l>', '<C-w><C-l>', { desc = 'Move focus to the right window' })
-- keymap('n', '<S-j>', '<C-w><C-j>', { desc = 'Move focus to the lower window' })
-- keymap('n', '<S-k>', '<C-w><C-k>', { desc = 'Move focus to the upper window' })

keymap("n", "<leader>wq", "<cmd>wincmd q<cr>", { noremap = true, silent = true, desc = 'Close Window' })
keymap("n", "<leader>n", "<cmd>noh<cr>", { noremap = true, silent = true, desc = 'Clear Search Highlight' })

-- Split "Sensibly"
-- Should automatically split or vsplit based on Ratios
keymap("n", "<leader>bs", split_sensibly, { noremap = true, silent = true, desc = "Alternate buffers" })

-- Change Colorscheme
keymap("n", "<leader>ud", "<cmd>set background=dark<cr>", { noremap = true, silent = true, desc = 'Dark Background' })
keymap("n", "<leader>ub", "<cmd>set background=light<cr>", { noremap = true, silent = true, desc = 'Light Background' })
keymap("n", "<leader>um", "<cmd>lua MiniMap.open()<cr>", { noremap = true, silent = true, desc = 'Mini Map' })


