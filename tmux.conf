# Reload config file
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Reloading config file....."

# Color 
set -g @white   "#f8f8f2"
set -g @black   "#282a36"
set -g @orange  "#ffb86c"
set -g @purple  "#bd93f9"
set -g @red     "#ff5555"
set -g @yellow  "#f1fa8c"
set -g @green   "#50fa7b"
set -g @cyan    "#8be9fd"
set -g @pink    "#ff79c6"
set -g @comment "#6272a4"
set -g @select  "#44475a"
set -g @subtle  "#424450"

# General
set -g default-terminal   "tmux-256color"
setw -q -g utf8 on
setw -g mode-keys         vi
set  -g status-keys       vi
# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on
set -sg escape-time       0
set -sg repeat-time       600     
set -s  focus-events      on
set  -g monitor-activity  on
set  -g visual-activity   off
set  -g history-limit     50000
set  -g mouse             off
set  -g set-titles        on
set  -g set-titles-string "#(echo \" \")" 
set  -g prefix2 Home            # Set Home key as second Prefix
bind Home send-prefix -2

# Other mode
set -g clock-mode-style              24
set -g clock-mode-colour             "#bd93f9"
set -g popup-border-lines            double
set -g popup-style                   "fg=#{@purple},bg=#{@black}"
set -g popup-border-style            "fg=#{@purple},bg=#{@black}"
set -g mode-style                    "bg=#{@orange},fg=#{@black}"
set -g message-style                 "bg=#{@orange},fg=#{@black}"
set -g message-command-style         "fg=#{@orange},bg=#{@black}"
set -g copy-mode-match-style         "bg=#{@orange},fg=#{@black}"
set -g copy-mode-current-match-style "bg=#{@green},fg=#{@black}"
set -g copy-mode-mark-style          "bg=#{@cyan},fg=#{@black}"

# WINDOW
setw -g automatic-rename on    # rename window to reflect current program
set  -g renumber-windows on    # renumber windows when a window is closed
set  -g status-justify   absolute-centre
setw -g window-status-current-format "#[bg=#{@black},fg=#{@purple},bold]#{?client_prefix,#[fg=#{@green}],}#[fg=#{@black},bg=#{@purple},bold]#{?client_prefix,#[bg=#{@green}]#I #W#{?window_bell_flag, 󰂚 ,}#{?window_zoomed_flag,  ,},#I #W#{?window_bell_flag, 󰂚 ,}#{?window_zoomed_flag,  ,}}#[bg=#{@black},fg=#{@purple},bold]#{?client_prefix,#[fg=#{@green}],}"
setw -g window-status-format "#[bg=#{@black},fg=#{@purple}]\[#I #W#{?window_bell_flag, 󰂚 ,}#{?window_zoomed_flag,  ,}#{?window_last_flag,  ,}\]"

# PANE
set -g base-index                  1     # start windows numbering at 1
setw -g pane-base-index            1     # make pane numbering consistent with windows
set -g display-time                1000  # slightly longer status messages display time
set -g display-panes-time          3000  # slightly longer pane indicators display time
set -g display-panes-active-colour "#50fa7b"
set -g display-panes-colour        "#bd93f9"
set -g pane-border-lines           double 
set -g pane-border-style           "bg=#{@black},fg=#{@white}"
set -g pane-active-border-style    "bg=#{@black},fg=#{@purple}"

# STATUS LINE
set -g status          on
set -g status-interval 1  # redraw status line every 10 seconds
set -g status-position top
set -g status-style    "bg=#{@black},fg=#{@purple}"

# LEFT STATUS
set -g status-left-length 20
set -g status-left "#[fg=#{@black},bg=#{@purple},bold]#{?client_prefix,#[bg=#{@green}] #(fish -c 'if string length -q -- (nmcli -f type connection show --active | grep -o vpn | uniq); printf "󰗹" ; else; if string length -q -- (nmcli -f type connection show --active | grep -o "wifi" | uniq); or string length -q -- (nmcli -f type connection show --active | grep -o "ethernet" | uniq); printf ""; else; printf ""; end; end')   #S , #(fish -c 'if string length -q -- (nmcli -f type connection show --active | grep -o vpn | uniq); printf "󰗹" ; else; if string length -q -- (nmcli -f type connection show --active | grep -o "wifi" | uniq); or string length -q -- (nmcli -f type connection show --active | grep -o "ethernet" | uniq); printf ""; else; printf ""; end; end')   #S }#[bg=#{@black},fg=#{@purple},bold]#{?client_prefix,#[fg=#{@green}],}"

# RIGHT STATUS
set -g status-right-length 20
set -g status-right "#[bg=#{@black},fg=#{@purple},bold]#{?client_prefix,#[fg=#{@green}],}#[fg=#{@black},bg=#{@purple},bold]#{?client_prefix,#[bg=#{@green}] #(cat /sys/class/power_supply/BAT0/capacity)\%  #(fish -c 'if test (cat /sys/class/power_supply/AC/online) -eq 1; echo "󱐋"; else; echo "󰂀"; end') , #(cat /sys/class/power_supply/BAT0/capacity)\%  #(fish -c 'if test (cat /sys/class/power_supply/AC/online) -eq 1; echo "󱐋"; else; echo "󰂀"; end') }"

# BINDING

# Clear screen vs history
# bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history

# Open a popup scratchpad
#bind -n M-g display-popup -E "tmux new-session -A -s scratch"
#bind -n M-g display-popup -T "FZF" -E "cd $(find | fzf)"
bind -n F1 display-popup -T "ProtonVPN" -E "protonvpn-cli disconnect"
bind -n F2 display-popup -T "ProtonVPN" -E "protonvpn-cli connect -fp tcp"
bind -n F3 new-window    -n "ProtonVPN"    "protonvpn-cli connect"
bind -n F4 display-popup -T "1.1.1.1"   -E "warp-cli disconnect"
bind -n F5 new-window    -n "Btop"         "btop"
bind -n F6 display-popup -T "1.1.1.1"   -E "warp-cli connect"
bind -n F7 new-window -n "Win#I:Manage" -c "#{pane_current_path}" fileManager
bind -n F8 new-window -n "Win#I:Git" -c "#{pane_current_path}" "lazygit"
bind -n F9 display-popup -T "Fuzzy Finder File" -d "#{pane_current_path}" -E "fd --strip-cwd-prefix -HLc auto -t f | fzf --no-multi | xargs -rI {} tmux new-window -n 'Win#I:File' -c '#{pane_current_path}' nvim {}"

# System clipboard 
bind-key -T copy-mode-vi Enter send -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# # -- Pane Navigation-----------------------------------------------
# bind -r h select-pane -L  # move left
# bind -r j select-pane -D  # move down
# bind -r k select-pane -U  # move up
# bind -r l select-pane -R  # move right
# bind > swap-pane -D       # swap current pane with the next one
# bind < swap-pane -U       # swap current pane with the previous one
# bind -r H resize-pane -L 2
# bind -r J resize-pane -D 2
# bind -r K resize-pane -U 2
# bind -r L resize-pane -R 2

# # -- Window Navigation---------------------------------------------
# bind C-c new-session        # create session
# bind C-f command-prompt -p find-session 'switch-client -t %%'  # find session
# bind BTab switch-client -l  # move to last session
# bind - split-window -v      # split current window horizontally 
# bind _ split-window -h      # split current window vertically
# # window navigation
# unbind n
# unbind p
# bind -r C-h previous-window # select previous window
# bind -r C-l next-window     # select next window
# bind Tab last-window        # move to last active window

# # -- Copy mode ----------------------------------------------------
# bind Enter copy-mode # enter copy mode
# bind -T copy-mode-vi v send -X begin-selection
# bind -T copy-mode-vi C-v send -X rectangle-toggle
# bind -T copy-mode-vi y send -X copy-selection-and-cancel
# bind -T copy-mode-vi Escape send -X cancel
# bind -T copy-mode-vi H send -X start-of-line
# bind -T copy-mode-vi L send -X end-of-line

# # -- Buffers ------------------------------------------------------
# bind b list-buffers     # list paste buffers
# bind p paste-buffer -p  # paste from the top paste buffer
# bind P choose-buffer    # choose which buffer to paste from


# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-open'

# Custom
set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'
set -g @resurrect-strategy-vim 'session'   # Restore session for Vim
set -g @resurrect-strategy-nvim 'session'  # Restore session for Neovim
set -g @resurrect-processes 'btop ssh mysql sqlite3 mariadb-client hx lazygit lazydocker manageFile'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-dir "$HOME/.config/tmux/resurrect"
# set -g @continuum-boot 'on'
set -g @continuum-restore 'off'
set -g @continuum-save-interval '60' # Minutes: 0 => not autosave; default 15 minutes

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'
